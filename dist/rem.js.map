{"version":3,"sources":["../src/rem.js"],"names":["window","rem","parseRem","remEl","remContent","getAttribute","obj","split","map","item","arr","replace","$1","toUpperCase","setViewport","option","viewport","document","querySelector","dpr","content","setAttribute","createElement","head","appendChild","setFontSize","clientWidth","documentElement","designWidth","ratio","maxWidth","style","fontSize","px2rem","px","toString","remSetting","rem2px","rootFontSize","devicePixelRatio","addEventListener","clearTimeout","tId","setTimeout"],"mappings":"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","file":"rem.js","sourcesContent":["/*\r\n * @Author: ChiHoNg - A Rookie FE\r\n * @E-mail: sheep_zh@163.com\r\n * @Date:   2017-02-18 15:41:40\r\n * @Last Modified by:   ChiHo-Ng\r\n * @Last Modified time: 2017-05-05 09:48:45\r\n */\r\n(function (window) {\r\n  'use strict';\r\n  let rem = (function () {\r\n    /**\r\n     * 传入meta节点,解析meta节点的内容,返回一个解析后的对象\r\n     * @param  {Node} remEl \r\n     * @return {Object}\r\n     * @example\r\n     * parseRem(document.querySelector('meta[name = \"rem-setting\"'))\r\n     * return {designWidth: \"750\", maxWidth: \"500\", ratio: \"2\", dpr: \"1\"}\r\n     */\r\n    function parseRem(remEl) {\r\n      let remContent = remEl.getAttribute('content');\r\n      let obj = {};\r\n      remContent.split(',').map((item) => {\r\n        let arr = item.split('=').map((item) => item.replace(/^\\s+|\\s+$/g, ''));\r\n        arr[0] = arr[0].replace(/\\-+(\\w{1})/, (item, $1) => {\r\n          return $1.toUpperCase();\r\n        });\r\n        obj[arr[0]] = arr[1];\r\n      });\r\n      return obj;\r\n    }\r\n\r\n    /**\r\n     * 设置meta标签,设置viewport的内容\r\n     * @param {Object} option\r\n     */\r\n    function setViewport(option) {\r\n      let viewport = document.querySelector('meta[name = \"viewport\"]');\r\n      let { dpr = 1 } = option; // 默认dpr = 1\r\n      let content = 'width=device-width, initial-scale=' + 1 / dpr + ', minimum-scale=' + 1 / dpr + ', maximum-scale=' + 1 / dpr + ', user-scalable=no';\r\n      if (viewport) {\r\n        viewport.setAttribute('content', content);\r\n      } else {\r\n        viewport = document.createElement('meta');\r\n        viewport.setAttribute('name', 'viewport');\r\n        viewport.setAttribute('content', content);\r\n        document.head.appendChild(viewport);\r\n      }\r\n    }\r\n\r\n    /** \r\n     * 视口宽度 clientWidth\r\n     * 设计稿 designWidth\r\n     * 转换系数 ratio（ratio表示将设计稿的px单位除以ratio，得出的值直接用于rem即可）\r\n     * 设备像素比 dpr\r\n     * 根字体大小rem\r\n     * 主要公式为，clientWidth * dpr = (designWidth / ratio) * rem\r\n     * 得出rem = (clientWidth * dpr * ratio) / designWidth\r\n     * 根据以上公式就可以计算出rem应为多少\r\n     * 获取视口宽度\r\n     * 此处获得的clientWidth是计算了dpr后的值，所以无需再与dpr相乘\r\n     * @param {Object} option\r\n     * @return void\r\n     */\r\n    function setFontSize(option) {\r\n      let clientWidth = document.documentElement.clientWidth || window.clientWidth;\r\n      let { designWidth = 750, ratio = 100, maxWidth = 500, dpr = 1 } = option; // 默认值\r\n      clientWidth = clientWidth > maxWidth * dpr ? maxWidth * dpr : clientWidth; // 判断当前宽度是否比设置的max-width大，是则使用设置的maxWidth，否则使用当前的clientWidth\r\n      document.documentElement.setAttribute('data-dpr', dpr);\r\n      document.documentElement.style.fontSize = clientWidth * ratio / designWidth + 'px';\r\n    }\r\n\r\n    /**\r\n     * px转换成rem\r\n     * @param  {Number|String} px\r\n     * @return {String}\r\n     */\r\n    function px2rem(px) {\r\n      px = px.toString().replace('px', '');\r\n      return px / remSetting.ratio + 'rem';\r\n    }\r\n\r\n    /**\r\n     * rem转换成px\r\n     * @param  {Number|String} px\r\n     * @return {String}\r\n     */\r\n    function rem2px(rem) {\r\n      rem = rem.toString().replace('rem', '');\r\n      let rootFontSize = document.documentElement.style.fontSize.replace('px', '');\r\n      return rem * rootFontSize + 'px';\r\n    }\r\n\r\n    let remEl = document.querySelector('meta[name=\"rem-setting\"]'); // 获取自定义的rem meta标签\r\n    let remSetting = (remEl && parseRem(remEl)) || {};\r\n    remSetting.dpr = remSetting.dpr ? remSetting.dpr : window.devicePixelRatio; // 若自定义了dpr，就用自定义的值，否则用屏幕的dpr值\r\n\r\n    setViewport(remSetting); // 设置viewport\r\n    setFontSize(remSetting); // 设置root font-size\r\n\r\n    window.addEventListener('resize', function () { // 事件绑定,缩放时重新设置font-size\r\n      clearTimeout(window.rem.tId);\r\n      window.rem.tId = setTimeout(function () { // 函数节流\r\n        setFontSize(remSetting);\r\n      }, 100);\r\n    }, false);\r\n\r\n    return { // 返回两个转换方法接口\r\n      px2rem,\r\n      rem2px\r\n    }\r\n  })();\r\n  window.rem = rem; // 全局变量\r\n})(window);\r\n"]}